name: Merge macros â€” robust ZIP debug & upload

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      input_dir:
        description: 'Parent directory containing group subfolders (relative to repo root)'
        required: true
        default: 'originals'
      output_dir:
        description: 'Directory to write merged files (relative to repo root)'
        required: true
        default: 'merged_output'
      versions:
        description: 'How many versions to generate per group'
        required: true
        default: '16'
      within_max_time:
        description: "Max pause time inside file (e.g. '1m32s')"
        required: true
        default: '1m32s'
      within_max_pauses:
        description: 'Max pauses inside each file'
        required: true
        default: '3'
      between_max_time:
        description: "Max pause time between files (e.g. '2m37s')"
        required: true
        default: '2m37s'
      between_max_pauses:
        description: 'Max pauses between files (compat)'
        required: true
        default: '1'
      exclude_count:
        description: 'Max files to randomly exclude per version (0..N-1)'
        required: true
        default: '5'
      seed:
        description: 'Optional seed (blank for random)'
        required: false
        default: ''

jobs:
  merge:
    runs-on: ubuntu-latest

    # put inputs into environment once (safe) so run blocks use only $ENV vars
    env:
      INPUT_DIR: ${{ github.event.inputs.input_dir }}
      OUTPUT_DIR: ${{ github.event.inputs.output_dir }}
      VERSIONS: ${{ github.event.inputs.versions }}
      WITHIN_MAX_TIME: ${{ github.event.inputs.within_max_time }}
      WITHIN_MAX_PAUSES: ${{ github.event.inputs.within_max_pauses }}
      BETWEEN_MAX_TIME: ${{ github.event.inputs.between_max_time }}
      BETWEEN_MAX_PAUSES: ${{ github.event.inputs.between_max_pauses }}
      EXCLUDE_COUNT: ${{ github.event.inputs.exclude_count }}
      SEED_INPUT: ${{ github.event.inputs.seed }}

    steps:
      - name: Checkout repository (with write creds)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Debug: repo root & input folder (safe)
        run: |
          echo "WORKDIR: $(pwd)"
          echo "Top-level list:"
          ls -la || true
          echo
          echo "Attempt to list input dir (if present): $INPUT_DIR"
          if [ -d "$INPUT_DIR" ]; then
            ls -la "$INPUT_DIR" || true
          else
            echo "Input dir not found: $INPUT_DIR"
          fi

      - name: Run merge_macros.py
        run: |
          set -euo pipefail

          # Build optional seed arg (empty means random)
          SEED_ARG=""
          if [ -n "${SEED_INPUT}" ]; then
            SEED_ARG="--seed ${SEED_INPUT}"
          fi

          echo "Running merge_macros.py with parameters:"
          echo "  input-dir:        $INPUT_DIR"
          echo "  output-dir:       $OUTPUT_DIR"
          echo "  versions:         $VERSIONS"
          echo "  within-max-time:  $WITHIN_MAX_TIME"
          echo "  within-max-pauses:$WITHIN_MAX_PAUSES"
          echo "  between-max-time: $BETWEEN_MAX_TIME"
          echo "  between-max-pauses:$BETWEEN_MAX_PAUSES"
          echo "  exclude-count:    $EXCLUDE_COUNT"
          echo "  seed:             ${SEED_INPUT:-<none>}"
          echo "----- START SCRIPT OUTPUT -----"

          python3 merge_macros.py \
            --input-dir "$INPUT_DIR" \
            --output-dir "$OUTPUT_DIR" \
            --versions "$VERSIONS" \
            ${SEED_ARG} \
            --exclude-count "$EXCLUDE_COUNT" \
            --within-max-time "$WITHIN_MAX_TIME" \
            --within-max-pauses "$WITHIN_MAX_PAUSES" \
            --between-max-time "$BETWEEN_MAX_TIME" \
            --between-max-pauses "$BETWEEN_MAX_PAUSES"

          echo "----- END SCRIPT OUTPUT -----"

      - name: Debug: locate merged_bundle zip(s) and print exact paths
        if: always()
        run: |
          echo "====== Searching for merged_bundle*.zip files ======"
          # find and list any matching zip files with sizes
          find "$(pwd)" -type f \( -name "merged_bundle*.zip" -o -name "merged_bundle_*.zip" \) -print -exec ls -lh "{}" \; || true

          echo
          echo "Listing output dir (if exists): $OUTPUT_DIR"
          if [ -d "$OUTPUT_DIR" ]; then
            ls -la "$OUTPUT_DIR" || true
          else
            echo "Output dir not present: $OUTPUT_DIR"
          fi

      - name: Commit counter file back to repo (if changed)
        if: always()
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          if [ -f ".github/merge_bundle_counter.txt" ]; then
            git add .github/merge_bundle_counter.txt || true
          fi

          # commit & push only if there are staged changes
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            BRANCH="${GITHUB_REF#refs/heads/}"
            git commit -m "Update merge bundle counter [skip ci]" || true
            git push origin "HEAD:${BRANCH}" || true
          fi

      - name: Upload any merged-bundle zip found (wildcard)
        uses: actions/upload-artifact@v4
        with:
          name: merged-bundle
          path: '**/merged_bundle*.zip'
