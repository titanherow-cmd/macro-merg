name: Merge macros (persisted counter, scan all folders, zip top-level)

on:
  workflow_dispatch:
    inputs:
      versions:
        description: 'How many versions per group'
        required: true
        default: '16'
      within_max_time:
        description: "Within-file max pause time (e.g. '1.30' or '1m30s')"
        required: true
        default: '1m32s'
      within_max_pauses:
        description: 'Max pauses inside each file'
        required: true
        default: '3'
      between_max_time:
        description: "After-file (between-files) max pause time (e.g. '4m53s')"
        required: true
        default: '2m37s'
      exclude_count:
        description: 'Max files to randomly exclude per version (0â€“N-1)'
        required: true
        default: '5'
      between_max_pauses:
        description: 'Max pauses between files (kept for compatibility; placed last)'
        required: true
        default: '1'

jobs:
  merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # allow committing the bumped counter back to the repo
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true  # ensures git uses GITHUB_TOKEN for push

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Bump run counter (expose BUNDLE_SEQ)
        id: bump
        run: |
          set -euo pipefail
          COUNTER_FILE=".github/merge_bundle_counter.txt"
          if [ -f "$COUNTER_FILE" ]; then
            PREV=$(cat "$COUNTER_FILE" | tr -d ' \t\n\r' || echo "")
            PREV=${PREV:-0}
          else
            PREV=0
          fi
          NEXT=$((PREV + 1))
          mkdir -p "$(dirname "$COUNTER_FILE")"
          echo "$NEXT" > "$COUNTER_FILE"
          # Export for subsequent steps
          echo "BUNDLE_SEQ=$NEXT" >> "$GITHUB_ENV"
          echo "BUMPED counter: $PREV -> $NEXT"
          echo "NEXT=$NEXT" > /tmp/merge_next.txt

      - name: Commit and push bumped counter back to repo
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          COUNTER_FILE=".github/merge_bundle_counter.txt"
          if [ ! -f "$COUNTER_FILE" ]; then
            echo "Counter file not present; nothing to commit."
            exit 0
          fi
          # Configure git user and commit
          git config user.name "github-actions[bot]" || true
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com" || true
          git add "$COUNTER_FILE"
          # Check if there is actually anything to commit
          if git diff --staged --quiet; then
            echo "No changes to counter to commit."
          else
            NEXT=$(cat "$COUNTER_FILE" || echo "")
            git commit -m "CI: bump merged bundle counter to ${NEXT}" || true
            # push to the current branch
            # Use HEAD to push back to the same branch that triggered the run
            git push origin HEAD || (echo "git push failed" && false)
            echo "Pushed updated counter: ${NEXT}"
          fi

      - name: Show originals (debug)
        run: |
          echo "PWD: $PWD"
          echo "Listing originals (top-level):"
          ls -la originals || true
          echo "Recursive sample (json files):"
          find originals -type f -name '*.json' -print || true

      - name: Run merge_macros.py with UI inputs
        env:
          PYTHONUNBUFFERED: '1'
        run: |
          set -euo pipefail
          VERSIONS="${{ github.event.inputs.versions }}"
          WITHIN_MAX_TIME="${{ github.event.inputs.within_max_time }}"
          WITHIN_MAX_PAUSES="${{ github.event.inputs.within_max_pauses }}"
          BETWEEN_MAX_TIME="${{ github.event.inputs.between_max_time }}"
          EXCLUDE_COUNT="${{ github.event.inputs.exclude_count }}"
          BETWEEN_MAX_PAUSES="${{ github.event.inputs.between_max_pauses }}"

          echo "Inputs:"
          echo " versions=${VERSIONS}"
          echo " within_max_time='${WITHIN_MAX_TIME}'"
          echo " within_max_pauses=${WITHIN_MAX_PAUSES}"
          echo " between_max_time='${BETWEEN_MAX_TIME}'"
          echo " exclude_count=${EXCLUDE_COUNT}"
          echo " between_max_pauses=${BETWEEN_MAX_PAUSES}"
          echo "BUNDLE_SEQ='${BUNDLE_SEQ:-(none)}'"

          python3 merge_macros.py \
            --input-dir "originals" \
            --output-dir "output" \
            --versions "${VERSIONS}" \
            --within-max-time "${WITHIN_MAX_TIME}" \
            --within-max-pauses "${WITHIN_MAX_PAUSES}" \
            --between-max-time "${BETWEEN_MAX_TIME}" \
            --between-max-pauses "${BETWEEN_MAX_PAUSES}" \
            --exclude-count "${EXCLUDE_COUNT}"

      - name: Zip merged outputs (ensure top-level folder name matches merged bundle)
        if: always()
        run: |
          set -euo pipefail
          BUNDLE="${BUNDLE_SEQ:-}"
          if [ -z "$BUNDLE" ]; then
            BUNDLE=$(cat .github/merge_bundle_counter.txt 2>/dev/null || echo "")
            BUNDLE=${BUNDLE:-1}
          fi
          OUTPUT_BASE="merged_bundle_${BUNDLE}"
          echo "Creating zip: ${OUTPUT_BASE}.zip from output/${OUTPUT_BASE}"
          # cd into 'output' so the zip contains OUTPUT_BASE as top-level (no leading 'output/')
          if [ -d "output/${OUTPUT_BASE}" ]; then
            (cd output && zip -r "../${OUTPUT_BASE}.zip" "${OUTPUT_BASE}") || true
            ls -la "${OUTPUT_BASE}.zip" || true
            echo "ZIP_NAME=${OUTPUT_BASE}.zip" >> "$GITHUB_ENV"
          else
            echo "No 'output/${OUTPUT_BASE}' found; creating empty zip fallback"
            zip -r "${OUTPUT_BASE}.zip" || true
            echo "ZIP_NAME=${OUTPUT_BASE}.zip" >> "$GITHUB_ENV"
          fi

      - name: Upload merged ZIP artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merged-bundle
          path: ${{ env.ZIP_NAME }}
