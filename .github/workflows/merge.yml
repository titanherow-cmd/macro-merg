name: Merge Macros (compact UI) - robust

on:
  workflow_dispatch:
    inputs:
      versions:
        description: 'How many versions per group'
        required: false
        default: '6'
      force:
        description: 'Re-run even if outputs exist'
        required: false
        default: 'Yes'
        options:
          - Yes
          - No
      within_max_time:
        description: "Within-file maximum pause time (examples: '1.30', '1:30', '1m30s')"
        required: true
        default: '2m47s'
      within_max_pauses:
        description: "Max pauses to insert inside each file (we pick 1..this)"
        required: true
        default: '5'
      between_max_time:
        description: "Between-files maximum pause time (examples: '10s', '1m')"
        required: true
        default: '4m53s'
      between_max_pauses:
        description: "Max pauses to insert between files (usually 1)"
        required: true
        default: '1'

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Ensure input folder exists
        run: |
          mkdir -p input
          echo "Ensured input/ exists. Place group subfolders with .json files inside input/."

      - name: Create sample input if empty
        run: |
          shopt -s nullglob
          groups=(input/*)
          jsons_found=0
          for g in "${groups[@]:-}"; do
            if [ -d "$g" ]; then
              shopt -s nullglob
              files=("$g"/*.json)
              if [ "${#files[@]}" -gt 0 ]; then
                jsons_found=1
                break
              fi
            fi
          done
          if [ "$jsons_found" -eq 0 ]; then
            echo "No groups/json found under input/. Creating sample input/group1/example.json for test runs."
            mkdir -p input/group1
            cat > input/group1/example.json <<'JSON'
[
  {"Type":"Move","Time":0,"X":100,"Y":100},
  {"Type":"Click","Time":500,"X":100,"Y":100},
  {"Type":"Move","Time":1500,"X":200,"Y":200},
  {"Type":"Click","Time":2000,"X":200,"Y":200}
]
JSON
          else
            echo "Found existing group JSON(s); not creating a sample."
          fi

      - name: Run merge_macros (compact) - direct args
        env:
          WITHIN_MAX_TIME: ${{ github.event.inputs.within_max_time }}
          WITHIN_MAX_PAUSES: ${{ github.event.inputs.within_max_pauses }}
          BETWEEN_MAX_TIME: ${{ github.event.inputs.between_max_time }}
          BETWEEN_MAX_PAUSES: ${{ github.event.inputs.between_max_pauses }}
          FORCE_CHOICE: ${{ github.event.inputs.force }}
        run: |
          python merge_macros.py \
            --versions "${{ github.event.inputs.versions }}" \
            --within-max-time "${WITHIN_MAX_TIME}" \
            --within-max-pauses "${WITHIN_MAX_PAUSES}" \
            --between-max-time "${BETWEEN_MAX_TIME}" \
            --between-max-pauses "${BETWEEN_MAX_PAUSES}" \
            $( [ "${FORCE_CHOICE}" = "Yes" ] && echo "--force" || echo "" )

      - name: Show output dir contents
        run: |
          echo "=== output/ ==="
          ls -la output || true
          echo "=== output/*.json ==="
          ls -la output/*.json || true
          echo "=== output/*_log.txt ==="
          ls -la output/*_log.txt || true

      - name: Ensure at least one log file exists (placeholder if necessary)
        run: |
          shopt -s nullglob
          logs=(output/*_log.txt)
          if [ "${#logs[@]}" -eq 0 ]; then
            echo '{"notice":"no logs were generated; workflow created this placeholder"}' > output/placeholder_log.txt
            echo "Created output/placeholder_log.txt"
          else
            echo "Found ${#logs[@]} log(s)."
          fi

      - name: Upload merged bundle (zip)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merged-bundle
          path: output/merged_bundle.zip

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: group-logs
          path: output/*_log.txt
