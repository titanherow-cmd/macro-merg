name: Merge Macros (compact UI) - originals

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      versions:
        description: 'How many versions per group'
        required: false
        default: '6'
      within_max_time:
        description: "Within-file max pause time (e.g. '1.30' or '1m30s')"
        required: true
        default: '2m47s'
      within_max_pauses:
        description: 'Max pauses inside each file'
        required: true
        default: '5'
      between_max_time:
        description: "Between-files max pause time (e.g. '4m53s')"
        required: true
        default: '4m53s'
      between_max_pauses:
        description: 'Max pauses between files'
        required: true
        default: '1'
      exclude_max:
        description: 'Max files to randomly exclude per version (0..N-1)'
        required: false
        default: '3'

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (with write access)
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Prepare/increment bundle counter
        id: bump_counter
        run: |
          set -euo pipefail
          COUNTER_FILE=".github/merge_bundle_counter.txt"
          mkdir -p "$(dirname "$COUNTER_FILE")"
          if [ -f "$COUNTER_FILE" ]; then
            n=$(cat "$COUNTER_FILE" | tr -d '[:space:]' || echo 0)
            if ! echo "$n" | grep -Eq '^[0-9]+$'; then
              n=0
            fi
          else
            n=0
          fi
          n=$((n + 1))
          echo "$n" > "$COUNTER_FILE"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$COUNTER_FILE"
          git commit -m "ci: bump merged bundle counter to ${n} [skip ci]" || true
          git push || echo "WARNING: git push failed - counter will not be persisted."
          echo "BUNDLE_SEQ=${n}" >> $GITHUB_ENV
          echo "BUNDLE_SEQ=${n}"

      - name: Show originals folder (debug)
        run: |
          echo "=== originals tree ==="
          if [ -d originals ]; then
            find originals -maxdepth 8 -type d -print -exec sh -c 'ls -1 "{}"/*.json 2>/dev/null || true' \;
          else
            echo "No originals/ folder found in repo root."
          fi

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run merge_macros.py (capture logs; do not abort workflow)
        env:
          WITHIN_MAX_TIME: ${{ github.event.inputs.within_max_time }}
          WITHIN_MAX_PAUSES: ${{ github.event.inputs.within_max_pauses }}
          BETWEEN_MAX_TIME: ${{ github.event.inputs.between_max_time }}
          BETWEEN_MAX_PAUSES: ${{ github.event.inputs.between_max_pauses }}
          EXCLUDE_MAX: ${{ github.event.inputs.exclude_max }}
        run: |
          set -uo pipefail
          mkdir -p output
          echo "Running merge_macros.py ..."
          # run and capture stdout/stderr, do not fail the step so we can upload logs & placeholder zip
          python merge_macros.py \
            --versions "${{ github.event.inputs.versions }}" \
            --within-max-time "${WITHIN_MAX_TIME}" \
            --within-max-pauses "${WITHIN_MAX_PAUSES}" \
            --between-max-time "${BETWEEN_MAX_TIME}" \
            --between-max-pauses "${BETWEEN_MAX_PAUSES}" \
            --exclude-max "${EXCLUDE_MAX}" \
            --force > output/script_stdout.log 2> output/script_stderr.log || true
          # show small tail in logs for quick inspection
          echo "=== tail: script_stdout.log ==="
          tail -n 200 output/script_stdout.log || true
          echo "=== tail: script_stderr.log ==="
          tail -n 200 output/script_stderr.log || true

      - name: Rename merged_bundle.zip to numbered zip (use counter)
        run: |
          set -euo pipefail
          SEQ="${BUNDLE_SEQ:-}"
          if [ -z "$SEQ" ]; then
            echo "BUNDLE_SEQ not set; skipping rename."
            exit 0
          fi
          mkdir -p output
          if [ -f output/merged_bundle.zip ]; then
            numbered="output/merged_bundle_${SEQ}.zip"
            mv output/merged_bundle.zip "$numbered"
            echo "Renamed merged_bundle.zip -> $numbered"
          else
            echo "No output/merged_bundle.zip found to rename. Creating placeholder merged_bundle_${SEQ}.zip"
            python -c 'import zipfile, pathlib, os; seq=os.environ.get("BUNDLE_SEQ","0"); p=pathlib.Path(f"output/merged_bundle_{seq}.zip"); p.parent.mkdir(parents=True, exist_ok=True); with zipfile.ZipFile(p,"w") as zf: zf.writestr("placeholder.txt","No merged_bundle.zip was produced by the script."); print(p)'
          fi

      - name: Show output dir (absolute)
        run: |
          if [ -d output ]; then
            echo "Output (absolute):"
            python -c "import os; print(os.path.abspath('output'))"
            ls -la output || true
          else
            echo "No output/ created."
          fi

      - name: Ensure placeholder artifact if none
        run: |
          shopt -s nullglob
          zips=(output/merged_bundle_*.zip)
          if [ "${#zips[@]}" -eq 0 ]; then
            mkdir -p output
            echo '{}' > output/placeholder.json
            echo "Created placeholder"
          else
            echo "Found zipped bundles"
          fi

      - name: Upload zipped bundles
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merged-bundles
          path: output/merged_bundle_*.zip

      - name: Upload logs (script stdout/stderr)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merge-logs
          path: |
            output/script_stdout.log
            output/script_stderr.log
