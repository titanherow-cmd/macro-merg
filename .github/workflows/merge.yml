name: Merge macros (stable UI)

on:
  workflow_dispatch:
    inputs:
      versions:
        description: 'How many versions per group'
        required: true
        default: '16'
      within_max_time:
        description: "Within-file max pause time (e.g. '1.30' or '1m30s')"
        required: true
        default: '1m32s'
      within_max_pauses:
        description: 'Max pauses inside each file'
        required: true
        default: '3'
      between_max_time:
        description: "After-file (between-files) max pause time (e.g. '4m53s')"
        required: true
        default: '2m37s'
      exclude_count:
        description: 'Max files to randomly exclude per version (0â€“N-1)'
        required: true
        default: '5'
      between_max_pauses:
        description: 'Max pauses between files (kept for compatibility; placed last)'
        required: true
        default: '1'

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Show originals (debug)
        run: |
          echo "PWD: $PWD"
          echo "Listing repo root:"
          ls -la
          echo "Listing originals (top-level):"
          ls -la originals || true
          echo "Recursing originals (short):"
          find originals -maxdepth 3 -type f -name "*.json" -print || true

      - name: Run merger
        run: |
          set -euo pipefail
          VERSIONS="${{ github.event.inputs.versions }}"
          WITHIN_MAX_TIME="${{ github.event.inputs.within_max_time }}"
          WITHIN_MAX_PAUSES="${{ github.event.inputs.within_max_pauses }}"
          BETWEEN_MAX_TIME="${{ github.event.inputs.between_max_time }}"
          EXCLUDE_COUNT="${{ github.event.inputs.exclude_count }}"
          BETWEEN_MAX_PAUSES="${{ github.event.inputs.between_max_pauses }}"

          echo "Inputs chosen:"
          echo "  versions=${VERSIONS}"
          echo "  within_max_time='${WITHIN_MAX_TIME}'"
          echo "  within_max_pauses=${WITHIN_MAX_PAUSES}"
          echo "  between_max_time='${BETWEEN_MAX_TIME}'"
          echo "  exclude_count=${EXCLUDE_COUNT}"
          echo "  between_max_pauses=${BETWEEN_MAX_PAUSES}"

          python3 merge_macros.py \
            --input-dir "originals" \
            --output-dir "output" \
            --versions "${VERSIONS}" \
            --within-max-time "${WITHIN_MAX_TIME}" \
            --within-max-pauses "${WITHIN_MAX_PAUSES}" \
            --between-max-time "${BETWEEN_MAX_TIME}" \
            --between-max-pauses "${BETWEEN_MAX_PAUSES}" \
            --exclude-count "${EXCLUDE_COUNT}"

      - name: Zip merged outputs
        if: always()
        run: |
          set -euo pipefail
          if [ -d output ]; then
            zip -r merged_bundle.zip output || true
            ls -la merged_bundle.zip || true
          else
            echo "No output folder; nothing to zip"
          fi

      - name: Upload merged bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merged-bundle
          path: merged_bundle.zip
