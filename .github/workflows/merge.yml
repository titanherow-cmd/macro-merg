name: Merge macros (UI simplified — no mins, intra always enabled)

on:
  workflow_dispatch:
    inputs:
      input_dir:
        description: 'Parent directory containing group subfolders (default: originals)'name: Merge Macros (compact UI)

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      versions:
        description: 'How many versions per group'
        required: false
        default: '6'
      within_max_time:
        description: "Within-file max pause time (e.g. '1.30' or '1m30s')"
        required: true
        default: '2m47s'
      within_max_pauses:
        description: 'Max pauses inside each file'
        required: true
        default: '5'
      between_max_time:
        description: "After-file (between-files) max pause time (e.g. '4m53s')"
        required: true
        default: '4m53s'
      between_max_pauses:
        description: 'Max pauses between files (ignored; for compatibility)'
        required: true
        default: '1'
      exclude_max:
        description: 'Max files to randomly exclude per version (0–N-1)'
        required: false
        default: '3'

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Increment bundle counter
        id: bump_counter
        run: |
          set -euo pipefail
          FILE=".github/merge_bundle_counter.txt"
          mkdir -p "$(dirname "$FILE")"
          n=$(cat "$FILE" 2>/dev/null || echo 0)
          n=$((n+1))
          echo "$n" > "$FILE"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$FILE"
          git commit -m "bump bundle counter $n" || true
          git push || true
          echo "BUNDLE_SEQ=$n" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run merge_macros_full_patched.py
        env:
          WITHIN_MAX_TIME: ${{ github.event.inputs.within_max_time }}
          WITHIN_MAX_PAUSES: ${{ github.event.inputs.within_max_pauses }}
          BETWEEN_MAX_TIME: ${{ github.event.inputs.between_max_time }}
          BETWEEN_MAX_PAUSES: ${{ github.event.inputs.between_max_pauses }}
          EXCLUDE_MAX: ${{ github.event.inputs.exclude_max }}
          BUNDLE_SEQ: ${{ env.BUNDLE_SEQ }}
        run: |
          set -euo pipefail
          python merge_macros_full_patched.py             --versions "${{ github.event.inputs.versions }}"             --within-max-time "${{ WITHIN_MAX_TIME }}"             --within-max-pauses "${{ WITHIN_MAX_PAUSES }}"             --between-max-time "${{ BETWEEN_MAX_TIME }}"             --between-max-pauses "${{ BETWEEN_MAX_PAUSES }}"             --exclude-max "${{ EXCLUDE_MAX }}"             --force

      - name: Rename zip
        run: |
          set -euo pipefail
          mkdir -p output
          if [ -f output/merged_bundle.zip ]; then
            mv output/merged_bundle.zip "output/merged_bundle_${BUNDLE_SEQ}.zip"
          fi

      - name: Upload zipped bundles
        uses: actions/upload-artifact@v4
        with:
          name: merged-bundles
          path: output/merged_bundle_*.zip

        required: false
        default: 'originals'
      output_dir:
        description: 'Directory to write merged files and ZIP (default: output)'
        required: false
        default: 'output'
      versions:
        description: 'Number of versions to create per group'
        required: false
        default: '5'
      seed:
        description: 'Optional RNG seed (leave empty for random)'
        required: false
        default: ''
      force:
        description: 'Process groups even if previously processed? (true/false)'
        required: false
        default: 'false'
      exclude_count:
        description: 'How many files to randomly exclude per version (0-3)'
        required: false
        default: '1'
      intra_file_max:
        description: 'Max number of pauses inside each file (integer)'
        required: false
        default: '4'
      intra_file_max_mins:
        description: 'Max pause length inside file (minutes). No min input in UI — script uses hardcoded min and will adapt if needed.'
        required: false
        default: '3'

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run merge_macros (UI inputs passed through)
        run: |
          set -euo pipefail
          INPUT_DIR="${{ github.event.inputs.input_dir }}"
          OUTPUT_DIR="${{ github.event.inputs.output_dir }}"
          VERSIONS="${{ github.event.inputs.versions }}"
          SEED="${{ github.event.inputs.seed }}"
          FORCE="${{ github.event.inputs.force }}"
          EXC="${{ github.event.inputs.exclude_count }}"
          INTRA_MAX="${{ github.event.inputs.intra_file_max }}"
          INTRA_MAXM="${{ github.event.inputs.intra_file_max_mins }}"

          # Build arguments -- note: intra-file pauses are always enabled
          ARGS="--input-dir \"${INPUT_DIR}\" --output-dir \"${OUTPUT_DIR}\" --versions ${VERSIONS} --exclude-count ${EXC} --intra-file-max ${INTRA_MAX} --intra-file-max-mins ${INTRA_MAXM} --intra-file-enabled"

          if [ -n "${SEED}" ]; then ARGS="${ARGS} --seed ${SEED}"; fi
          if [ "${FORCE}" = 'true' ]; then ARGS="${ARGS} --force"; fi

          echo "Running: python merge_macros.py ${ARGS}"
          eval python merge_macros.py ${ARGS}

      - name: Upload merged ZIP
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merged-zip
          path: ${{ github.event.inputs.output_dir }}/merged_bundle.zip
