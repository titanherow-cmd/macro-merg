name: Merge macros (fixed inputs)

on:
  workflow_dispatch:
    inputs:
      versions:
        description: 'How many versions per group'
        required: true
        default: '16'
      within_max_time:
        description: "Within-file max pause time (e.g. '1.30' or '1m30s')"
        required: true
        default: '1m32s'
      within_max_pauses:
        description: 'Max pauses inside each file'
        required: true
        default: '3'
      between_max_time:
        description: "After-file (between-files) max pause time (e.g. '4m53s')"
        required: true
        default: '2m37s'
      exclude_count:
        description: 'Max files to randomly exclude per version (0â€“N-1)'
        required: true
        default: '5'
      between_max_pauses:
        description: 'Max pauses between files (ignored; for compatibility)'
        required: true
        default: '1'

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run merge_macros.py with UI inputs
        run: |
          set -euo pipefail

          # Read workflow inputs (these are strings)
          VERSIONS="${{ github.event.inputs.versions }}"
          WITHIN_MAX_TIME="${{ github.event.inputs.within_max_time }}"
          WITHIN_MAX_PAUSES="${{ github.event.inputs.within_max_pauses }}"
          BETWEEN_MAX_TIME="${{ github.event.inputs.between_max_time }}"
          EXCLUDE_COUNT="${{ github.event.inputs.exclude_count }}"
          BETWEEN_MAX_PAUSES="${{ github.event.inputs.between_max_pauses }}"

          # Print chosen values for logs
          echo "Inputs:"
          echo "  versions=${VERSIONS}"
          echo "  within_max_time='${WITHIN_MAX_TIME}'"
          echo "  within_max_pauses=${WITHIN_MAX_PAUSES}"
          echo "  between_max_time='${BETWEEN_MAX_TIME}'"
          echo "  exclude_count=${EXCLUDE_COUNT}"
          echo "  between_max_pauses=${BETWEEN_MAX_PAUSES}"

          # Call script (script accepts legacy and new flags; both are OK)
          python3 merge_macros.py \
            --input-dir "originals" \
            --output-dir "output" \
            --versions "${VERSIONS}" \
            --within-max-time "${WITHIN_MAX_TIME}" \
            --within-max-pauses "${WITHIN_MAX_PAUSES}" \
            --between-max-time "${BETWEEN_MAX_TIME}" \
            --between-max-pauses "${BETWEEN_MAX_PAUSES}" \
            --exclude-count "${EXCLUDE_COUNT}"

      - name: Zip merged outputs
        run: |
          set -euo pipefail
          if [ -d output ]; then
            zip -r merged_bundle.zip output || true
          else
            echo "No output directory found; creating empty zip"
            zip -r merged_bundle.zip --filesync || true
          fi

      - name: Upload merged ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: merged-bundle
          path: merged_bundle.zip
