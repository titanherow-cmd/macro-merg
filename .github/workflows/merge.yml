name: Merge Macros (compact UI)

on:
  workflow_dispatch:
    inputs:
      versions:
        description: 'How many versions per group'
        required: false
        default: '6'
      force:
        description: 'Re-run even if outputs exist (true/false)'
        required: false
        default: 'false'
      between_min:
        description: "Between-files shortest pause (e.g. '10s' or '1m')"
        required: true
        default: '10s'
      between_max:
        description: "Between-files longest pause (e.g. '4m53s')"
        required: true
        default: '4m53s'
      within_min:
        description: "Within-file shortest pause (e.g. '1m')"
        required: true
        default: '1m'
      within_max:
        description: "Within-file longest pause (e.g. '2m47s')"
        required: true
        default: '2m47s'
      min_pauses:
        description: 'Min pauses per file (for within-file rule)'
        required: false
        default: '2'
      max_pauses:
        description: 'Max pauses per file (for within-file rule)'
        required: false
        default: '9'

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies (if any)
        run: |
          if [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          else
            python -m pip install --upgrade pip
          fi

      - name: Run merge_macros (compact)
        env:
          BETWEEN_MIN: ${{ github.event.inputs.between_min }}
          BETWEEN_MAX: ${{ github.event.inputs.between_max }}
          WITHIN_MIN: ${{ github.event.inputs.within_min }}
          WITHIN_MAX: ${{ github.event.inputs.within_max }}
        run: |
          ARGS="--versions ${{ github.event.inputs.versions }} --between-min '${BETWEEN_MIN}' --between-max '${BETWEEN_MAX}' --within-min '${WITHIN_MIN}' --within-max '${WITHIN_MAX}' --min-pauses ${{ github.event.inputs.min_pauses }} --max-pauses ${{ github.event.inputs.max_pauses }}"
          if [ "${{ github.event.inputs.force }}" = "true" ]; then
            ARGS="${ARGS} --force"
          fi
          echo "Running: python merge_macros.py $ARGS"
          python merge_macros.py $ARGS

      - name: List outputs
        run: ls -la output || true

      - name: Upload merged bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merged-bundle
          path: output/merged_bundle.zip

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: group-logs
          path: output/*_log.txt
