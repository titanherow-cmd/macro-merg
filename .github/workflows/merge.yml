name: Merge Macros (compact UI) - minimal

on:
  workflow_dispatch:
    inputs:
      versions:
        description: 'How many versions per group'
        required: false
        default: '6'
      force:
        description: 'Re-run even if outputs exist'
        required: false
        default: 'Yes'
        options:
          - Yes
          - No
      within_max_time:
        description: "Within-file max pause time (e.g. '1.30' or '1m30s')"
        required: true
        default: '2m47s'
      within_max_pauses:
        description: 'Max pauses inside each file'
        required: true
        default: '5'
      between_max_time:
        description: "Between-files max pause time (e.g. '4m53s')"
        required: true
        default: '4m53s'
      between_max_pauses:
        description: 'Max pauses between files'
        required: true
        default: '1'

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Ensure input folder exists
        run: |
          mkdir -p input
          echo "Ensured input/ exists."

      - name: Create small sample input if none present
        run: |
          found=0
          for d in input/*/ ; do
            if [ -d "$d" ]; then
              shopt -s nullglob
              files=( "$d"/*.json )
              if [ "${#files[@]}" -gt 0 ]; then
                found=1
                break
              fi
            fi
          done
          if [ "$found" -eq 0 ]; then
            mkdir -p input/group1
            # create a tiny JSON file using printf (avoid heredoc)
            printf '[\n  {"Type":"Move","Time":0,"X":100,"Y":100},\n  {"Type":"Click","Time":500,"X":100,"Y":100}\n]\n' > input/group1/example.json
            echo "Created sample input/group1/example.json"
          else
            echo "Found existing input JSON(s); not creating sample."
          fi

      - name: Run merge_macros.py
        env:
          WITHIN_MAX_TIME: ${{ github.event.inputs.within_max_time }}
          WITHIN_MAX_PAUSES: ${{ github.event.inputs.within_max_pauses }}
          BETWEEN_MAX_TIME: ${{ github.event.inputs.between_max_time }}
          BETWEEN_MAX_PAUSES: ${{ github.event.inputs.between_max_pauses }}
          FORCE_CHOICE: ${{ github.event.inputs.force }}
        run: |
          python merge_macros.py \
            --versions "${{ github.event.inputs.versions }}" \
            --within-max-time "${WITHIN_MAX_TIME}" \
            --within-max-pauses "${WITHIN_MAX_PAUSES}" \
            --between-max-time "${BETWEEN_MAX_TIME}" \
            --between-max-pauses "${BETWEEN_MAX_PAUSES}" \
            $( [ "${FORCE_CHOICE}" = "Yes" ] && echo "--force" || echo "" )

      - name: Show output dir
        run: |
          echo "=== output ==="
          ls -la output || true

      - name: Ensure placeholder log exists if none
        run: |
          shopt -s nullglob
          logs=(output/*_log.txt)
          if [ "${#logs[@]}" -eq 0 ]; then
            mkdir -p output
            echo '{"notice":"placeholder log created by workflow"}' > output/placeholder_log.txt
            echo "Created output/placeholder_log.txt"
          else
            echo "Found ${#logs[@]} log(s)."
          fi

      - name: Upload merged bundle (zip)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merged-bundle
          path: output/merged_bundle.zip

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: group-logs
          path: output/*_log.txt
